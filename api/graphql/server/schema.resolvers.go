package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/google/uuid"
	"github.com/owasp-amass/config/config"
	"github.com/owasp-amass/engine/api/graphql/server/model"
	"github.com/owasp-amass/engine/sessions"
	"github.com/owasp-amass/engine/types"
)

// CreateSession is the resolver for the createSession field.
func (r *mutationResolver) CreateSession(ctx context.Context, input model.CreateSessionInput) (*model.Session, error) {
	fmt.Println("Create Session Called")

	//r.scheduler.Schedule()
	//input.Config

	testSession := &model.Session{
		SessionToken: "00000000-0000-0000-0000-0000000000033", //?
	}
	return testSession, nil
}

// CreateSessionFromJSON is the resolver for the createSessionFromJson field.
func (r *mutationResolver) CreateSessionFromJSON(ctx context.Context, input model.CreateSessionJSONInput) (*model.Session, error) {
	var config config.Config
	fmt.Println("CreateSessionFromJSON")
	err := json.Unmarshal([]byte(input.Config), &config)
	if err != nil {
		fmt.Println(err)
	}

	// TODO pefrorm check againsts asset list

	newSession, err := sessions.NewSession(&config)
	if err != nil {
		fmt.Println(err)
	}

	token, err := r.sessionManager.Add(newSession)
	if err != nil {
		fmt.Println(err)
	}

	model := &model.Session{
		SessionToken: token.String(),
	}
	return model, nil
}

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input model.CreateAssetInput) (*model.Asset, error) {
	//event := &events.Event{Name: "NewSession", Type: events.EventTypeLog, Priority: 1}
	fmt.Printf("%#v\n", input)

	token, _ := uuid.Parse(input.SessionToken)

	// TODO validation againts asset types

	a := input.Data.(map[string]interface{})

	//	a1 := a["asset"].(map[string]interface{})

	var a2 types.AssetData
	/*
		for _, a4 := range a1 {
			a2 = a4.(types.AssetData)
		}
	*/
	/*
		a2 = types.AssetData{
			OAMAsset: a1["address"].(oam.Asset),
			OAMType:  a1["type"].(oam.AssetType),
		}

	*/

	event := &types.Event{
		UUID:    uuid.New(),
		Name:    *input.AssetName,
		Session: token,
		Data:    a2,
		Type:    types.EventTypeAsset,
	}
	r.sched.Schedule(event)
	session := r.sessionManager.Get(token)
	if session != nil {
		session.PubSub.Publish("Log created asset")
	}

	model := &model.Asset{
		ID: event.UUID.String(),
	}
	return model, nil
}

// TerminateSession is the resolver for the terminateSession field.
func (r *mutationResolver) TerminateSession(ctx context.Context, sessionToken string) (*bool, error) {
	result := true
	token, _ := uuid.Parse(sessionToken)
	r.sessionManager.Cancel(token)
	return &result, nil
}

// Placeholder is the resolver for the placeholder field.
func (r *queryResolver) Placeholder(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Placeholder - placeholder"))
}

// LogMessages is the resolver for the logMessages field.
func (r *subscriptionResolver) LogMessages(ctx context.Context, sessionToken string) (<-chan *string, error) {
	token, _ := uuid.Parse(sessionToken)
	session := r.sessionManager.Get(token)

	session.PubSub.Publish("Channel created")
	fmt.Println("LogMessages callled")
	if session != nil {

		ch := session.PubSub.Subscribe()

		return ch, nil
	}

	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
